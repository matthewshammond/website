<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Matt Hammond Inc</title>
    <link>http://localhost:1313/categories/linux/</link>
    <description>Recent content in Linux on Matt Hammond Inc</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Jan 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Crontab</title>
      <link>http://localhost:1313/crontab/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/crontab/</guid>
      <description># ┌───────────── minute (0 - 59) # │ ┌───────────── hour (0 - 23) # │ │ ┌───────────── day of month (1 - 31) # │ │ │ ┌───────────── month (1 - 12) # │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday; # │ │ │ │ │ 7 is also Sunday on some systems) # │ │ │ │ │ # │ │ │ │ │ # * * * * * command_to_execute https://crontab.</description>
    </item>
    <item>
      <title>Regex</title>
      <link>http://localhost:1313/regex/</link>
      <pubDate>Thu, 12 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/regex/</guid>
      <description>. - Any Character Except New Line \d - Digit (0-9) \D - Not a Digit (0-9) \w - Word Character (a-z, A-Z, 0-9, _) \W - Not a Word Character \s - Whitespace (space, tab, newline) \S - Not Whitespace (space, tab, newline) \b - Word Boundary \B - Not a Word Boundary ^ - Beginning of a String $ - End of a String [] - Matches Characters in brackets [^ ] - Matches Characters NOT in brackets | - Either Or ( ) - Group Quantifiers: * - 0 or More + - 1 or More ?</description>
    </item>
    <item>
      <title>Netcat Chat Server</title>
      <link>http://localhost:1313/netcat-chat-server/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/netcat-chat-server/</guid>
      <description>Local Host netcat -l -p 1299 Connecting Host netcat localhost 1299 </description>
    </item>
    <item>
      <title>SSH Keys</title>
      <link>http://localhost:1313/ssh-keys/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/ssh-keys/</guid>
      <description>create ssh key in terminal ssh-keygen -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C &amp;#34;john@example.com&amp;#34; -a: It’s the numbers of KDF (Key Derivation Function) rounds. Higher numbers result in slower passphrase verification, increasing the resistance to brute-force password cracking should the private-key be stolen. -t: Specifies the type of key to create, in our case the Ed25519. -f: Specify the filename of the generated key file. If you want it to be discovered automatically by the SSH agent, it must be stored in the default .</description>
    </item>
    <item>
      <title>Steganography Payload</title>
      <link>http://localhost:1313/steganography-payload/</link>
      <pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/steganography-payload/</guid>
      <description>Create Payload create a bash script (i.e. payload.sh) #!/bin/bash echo &amp;#34;This is the payload script&amp;#34; transform script to base64 cat payload.sh | base64 | tr -d &amp;#39;\n&amp;#39; Embed Payload clear metadata from image exiftool -all= image.jpg load hash into image exiftool -Certificate=&amp;#39;base64 hash&amp;#39; image.jpg Execute Payload p=$(cat image.jpg | grep Cert -a | sed &amp;#39;s/&amp;lt;[^&amp;gt;]*&amp;gt;//g&amp;#39; | base64 -D);eval $p </description>
    </item>
  </channel>
</rss>
